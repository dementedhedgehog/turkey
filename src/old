#include <iostream>
#include <string>

#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

#include "model/model.h"
#include "control/control.h"
#include "view/view.h"


const int SCREEN_WIDTH  = 640;
const int SCREEN_HEIGHT = 480;
const char * GAME_NAME = "Turkey";

/**
* Log an SDL error with some error message to the output stream of our choice
* @param os The output stream to write the message too
* @param msg The error message to write, format will be msg error: SDL_GetError()
*/
void logSDLError(std::ostream &os, const std::string &msg){
	os << msg << " error: " << SDL_GetError() << std::endl;
}


/**
* Loads a BMP image into a texture on the rendering device
* @param file The BMP image file to load
* @param ren The renderer to load the texture onto
* @return the loaded texture, or nullptr if something went wrong.
*/
SDL_Texture* loadTexture(const std::string &file, SDL_Renderer * renderer){

	// Initialize to nullptr to avoid dangling pointer issues
	SDL_Texture *texture = nullptr;

	// Load the texture
    texture = IMG_LoadTexture(renderer, file.c_str()); 

    // Make sure converting went ok too
    if (texture == nullptr) {
        logSDLError(std::cout, "CreateTextureFromSurface");
	}

	return texture;
}



/**
* Draw an SDL_Texture to an SDL_Renderer at position x, y, preserving
* the texture's width and height
* @param tex The source texture we want to draw
* @param renderer The renderer we want to draw too
* @param x The x coordinate to draw too
* @param y The y coordinate to draw too
*/
void renderTexture(SDL_Texture *tex, SDL_Renderer *renderer, int x, int y) {

	// Setup the destination rectangle to be at the position we want
	SDL_Rect dst;
	dst.x = x;
	dst.y = y;

	// Query the texture to get its width and height to use
	SDL_QueryTexture(tex, NULL, NULL, &dst.w, &dst.h);
	SDL_RenderCopy(renderer, tex, NULL, &dst);
}



int main(int argc, char **argv){

	if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
        logSDLError(std::cout, "SDL_Init");
		return 1;
	}

    SDL_Window * win = SDL_CreateWindow(GAME_NAME, 
        100, 100, SCREEN_WIDTH, SCREEN_HEIGHT,
        SDL_WINDOW_SHOWN);
    if (win == nullptr) {
        logSDLError(std::cout, "CreateWindow");
        return 2;
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(win, -1, 
        SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (renderer == nullptr) {
        logSDLError(std::cout, "CreateRenderer");
        return 3;
    }
 
    SDL_Texture * background = loadTexture("./res/dungen.png", renderer);
    SDL_Texture * background_parallax = loadTexture("./res/dungen_parallax.png", renderer);
    if (background == nullptr || background_parallax == nullptr) {
        logSDLError(std::cout, "LoadBMP");
        return 4;
    }


    SDL_RenderClear(renderer);

    int backgroundWidth, backgroundHeight;
    SDL_QueryTexture(background, NULL, NULL, &backgroundWidth, &backgroundHeight);
    renderTexture(background, renderer, 0, 0);
    renderTexture(background, renderer, backgroundWidth, 0);
    renderTexture(background, renderer, 0, backgroundHeight);
    renderTexture(background, renderer, backgroundWidth, backgroundHeight);

    int iW, iH;
    SDL_QueryTexture(background_parallax, NULL, NULL, &iW, &iH);
    int x = SCREEN_WIDTH / 2 - iW / 2;
    int y = SCREEN_HEIGHT / 2 - iH / 2;
    renderTexture(background_parallax, renderer, x, y);

    SDL_RenderPresent(renderer);
    SDL_Delay(2000);

    //SDL_RenderCopy(renderer, tex, NULL, NULL);
    SDL_RenderPresent(renderer);

    SDL_Delay(2000);

    SDL_DestroyTexture(background);
    SDL_DestroyTexture(background_parallax);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(win);

	SDL_Quit();

    Model * model = new Model();
    std::cout << model->getName() << std::endl;     
    delete model;

    Control * control = new Control();
    std::cout << control->getName() << std::endl;     
    delete control;

    View * view = new View();
    std::cout << view->getName() << std::endl;     
    delete view;

	return 0;
}
