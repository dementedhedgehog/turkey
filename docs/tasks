
tasks
=====

 PROBLEM!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    moveable objects that aren't potential colliders are falling through the floor!
    projected position not calculated properly!!!



  PROBLEMS:
     doesn't do corner collisions in the right order?
     fireball has collisions .. where are tjjhey defined?
     need to check for all collisions there's a configured collision resolver
     need to handle inheritance of collision resolvers

  HIGH PRIORITY
     - internal edges FUCK!  hmmm 
     - passes through squares FUCK!
     - abstract debounced buttons

  - deferred corner collisions? defer using a FLAG rather than allocating collisions to a list!!


  COLLISION PLAN

    question ... how do I keep the ids for the movable objects separate from the others?
    answer.. it's easier to just have two.


  * MOVING OBJECT COLLISIONS
  - detect relative velocity?

  * strip all the stupid manager classes out of the views.. make them globals,
    same with the view and the model???

  * windows installer
     - what dlls do I need?

  * move load_texture into the image manager
  * why does each view keep a reference to the image manager (can't I just make them globals?
  * render fps text on the GPU
  * gpu side static text class
  * load sprites in python
  * expose game obj type to python
  * expose map of collision resolutions between game object types to python.


  * return where collision occurred..  (collision internal?) BUGGY!   

      - array based collision resolution system 
      - static strings
      - slopes
      - bamboo l-system/IFS
      - parallax backgrounds      
      - build using autogen
      - sprites
      - profiling

   * collision detection
      - scaling acceleration!
      - quad trees?
      - internal edges / slopes
      - n moving bodies
      - ladders
      - collision handling: friction, hysterisis, programmable callbacks  
      - needs penetration resolution for two objects moving towards each other??

   * settings in python (debug etc)
       - screen boundaries
       - aabb bounding boxes

   * sprite implementation and animation

   * triggers in python.. collisions or collisions and inputs
   * dump a stack trace on error
   * screens/view contexts.. need an intro, main menu, etc
   * sound manager
   * resource cache  
   * widget library?

   * keyboard handler
       - handle overloaded keys alt-left and left trigger different actions
       - jeremy has a delayed button behaviour that needs to be implemented

later
====
   * ui widget library
   * parallax, fake 3d tunnels, snow etc
   * particle system for flashy stuff

done
====

  * add blocks
  * sort out a repo
  * fix memory bug .. use gdb, run turkey, where.
  * create the world from a python script
  * game_objects list with positions and bounding boxes
  * embed python     
  * new keyboard handler for fighting 
  * pause needs to display something on the screen!
  * settings in python
       - draw grid
       - draw fps
  * rename game components to game views
  * collision detection
      - speculative collisions
      - check collisions before moving
  * move camera
  * particle systems
  * parallax backgrounds
  * background manager
  * build in windows   
  * particle system (to check the collision system)
  * set backgrounds/foregrounds from python
  * customizable keyboard handler (map keys to actions).
  * set gravity from python 
  * play sound?
  * sideways movement is slow
  * collision: do fixed detection first
  * collision: give game objects a type
  * collision: sort out map from (movable game obj, fixed game obj, side) -> resolver pluggable collision resolvers
  * load textures from file  
  * fork for collisions
  * print out list of resolvers
      